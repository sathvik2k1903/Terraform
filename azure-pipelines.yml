# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: "windows-latest"

#Build stage
stages:
  - stage: "Build"
    jobs:
      - job: "Build"
        displayName: Build job
        steps:

        - task: CopyFiles@2
          displayName: copy files to target
          inputs:
            SourceFolder: '1.WebApps/WebApp-1'
            Contents: '**'
            TargetFolder: '$(build.artifactstagingdirectory)'

        - task: PublishBuildArtifacts@1
          displayName: publish build artifact
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

# deploy stage
  - stage: "Deploy"
    condition: true
    jobs:
       -  job: "Deploy"
          displayName: Deploy job
          steps:

            -   task: DownloadBuildArtifacts@1
                displayName: Download Build Artifact
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  downloadPath: '$(System.DefaultWorkingDirectory)'

            -  task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
               displayName: 'Terraform install'
               inputs:
                terraformVersion: 1.3.4
  
            -   task: TerraformTaskV3@3
                displayName: Terraform init
                inputs:
                 provider: 'azurerm'
                 command: 'init'
                 workingDirectory: '$(System.DefaultWorkingDirectory)\drop'
                 backendServiceArm: 'Sathvik Azure'
                 backendAzureRmResourceGroupName: 'tf-storage-rg'
                 backendAzureRmStorageAccountName: 'tfstorage7447'
                 backendAzureRmContainerName: 'tfcontainer7447'
                 backendAzureRmKey: 'terraform.tfstate'

            -  task: TerraformTaskV3@3
               displayName: Terraform validate
               inputs:
                provider: 'azurerm'
                command: 'validate'
                workingDirectory: '$(System.DefaultWorkingDirectory)\drop'

            -  task: TerraformTaskV3@3
               displayName: Terraform plan
               inputs:
                 provider: 'azurerm'
                 command: 'plan'
                 workingDirectory: '$(System.DefaultWorkingDirectory)\drop'
                 commandOptions: '-out=tfplan'
                 environmentServiceNameAzureRM: 'Sathvik Azure'

            -  task: TerraformTaskV3@3
               displayName: Terraform apply
               inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)\drop'
                commandOptions: '-auto-approve'
                environmentServiceNameAzureRM: 'Sathvik Azure'


            - task: TerraformTaskV3@3
              displayName: Terraform destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)\drop'
                commandOptions: '-auto-approve'
                environmentServiceNameAzureRM: 'Sathvik Azure'